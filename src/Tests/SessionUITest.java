package Tests;import Application.Session;import Application.SessionController;import Domain.Role;import Domain.UserManager;import UserInterface.SessionUI;import org.junit.Test;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import static org.junit.Assert.*;public class SessionUITest {    Session session = new Session();    UserManager userManager = new UserManager();    SessionController sessionController = new SessionController(session, userManager);    SessionUI sessionUi = new SessionUI(sessionController);    public SessionUITest() {        testLogin();    }    @Test    public void testLogin() {        // Set all System.out (so prints and such) output to go into this stream, so we can assert its contents.        ByteArrayOutputStream out = new ByteArrayOutputStream();        System.setOut(new PrintStream(out));        // Check if session is set up correctly        assertFalse(session.isLoggedIn());        assertEquals(0, session.getRoles().size());        // Logout, user not logged in, should fail        sessionUi.logout();        assertEquals("""                        Already logged out.\r                        """.replaceAll("\n|\r\n", System.getProperty("line.separator")),                out.toString().replaceAll("\n|\r\n", System.getProperty("line.separator")));        out.reset();        // Login as a developer        System.setIn(new ByteArrayInputStream("jeroenBe\nAardappel862\n".getBytes()));        sessionUi.loginRequest();        assertTrue(                (out.toString().replaceAll("\n|\r\n", System.getProperty("line.separator")).equals("""                        Type 'BACK' to cancel login\r                        Enter username:\r                        Enter password:\r                        Welcome jeroenBe! Your assigned roles are: project manager, Python programmer\r                        """.replaceAll("\\n|\\r\\n", System.getProperty("line.separator"))))                ||                (out.toString().replaceAll("\n|\r\n", System.getProperty("line.separator")).equals("""                        Type 'BACK' to cancel login\r                        Enter username:\r                        Enter password:\r                        Welcome jeroenBe! Your assigned roles are: Python programmer, project manager\r                        """.replaceAll("\\n|\\r\\n", System.getProperty("line.separator"))))                );        assertTrue(session.isLoggedIn());        out.reset();        // Logout, session should be removed and role made null        sessionUi.logout();        assertEquals(out.toString().replaceAll("\n|\r\n", System.getProperty("line.separator")),                """                        Logged out.\r                        """.replaceAll("\\n|\\r\\n", System.getProperty("line.separator")));        out.reset();        assertFalse(session.isLoggedIn());        assertEquals(0,session.getRoles().size());        // Login as a developer        System.setIn(new ByteArrayInputStream("OlavBl\npeer321\nOlavBl\npeer123\n".getBytes()));        sessionUi.loginRequest();        String expected = """                Type 'BACK' to cancel login\r                Enter username:\r                Enter password:\r                Username/password combination is incorrect\r                Type 'BACK' to cancel login\r                Enter username:\r                Enter password:\r                Welcome OlavBl! Your assigned roles are: Python programmer\r                """.replaceAll("\\n|\\r\\n", System.getProperty("line.separator"));        assertEquals(out.toString().replaceAll("\\n|\\r\\n", System.getProperty("line.separator")), expected);        out.reset();        assertTrue(session.isLoggedIn());        assertTrue(session.getRoles().contains(Role.PYTHONPROGRAMMER));        // Login as a project manager, should fail as already logged in, current session should stay untouched        // Role should stay developer        sessionUi.loginRequest();        assertEquals(out.toString().replaceAll("\\n|\\r\\n", System.getProperty("line.separator")),                """                        You are already logged in!\r                        """.replaceAll("\\n|\\r\\n", System.getProperty("line.separator")));        out.reset();        assertEquals(session.getCurrentUser().getUsername(), "OlavBl");        assertTrue(session.isLoggedIn());        assertTrue(session.getRoles().contains(Role.PYTHONPROGRAMMER));        // Logout, session should be removed and role made null        sessionUi.logout();        assertEquals(out.toString(), "Logged out.\r\n".replaceAll("\\n|\\r\\n", System.getProperty("line.separator")));        out.reset();        assertFalse(session.isLoggedIn());        assertEquals(0,session.getRoles().size());        // BACK 1        System.setIn(new ByteArrayInputStream("BACK\n".getBytes()));        sessionUi.loginRequest();        expected = """                Type 'BACK' to cancel login\r                Enter username:\r                Cancelled login\r                """.replaceAll("\\n|\\r\\n", System.getProperty("line.separator"));        assertEquals(out.toString().replaceAll("\\n|\\r\\n", System.getProperty("line.separator")), expected);        out.reset();        assertFalse(session.isLoggedIn());        assertEquals(0,session.getRoles().size());        // BACK 2        System.setIn(new ByteArrayInputStream("OlavBl\nBACK\n".getBytes()));        sessionUi.loginRequest();        expected = """                Type 'BACK' to cancel login\r                Enter username:\r                Enter password:\r                Cancelled login\r                """.replaceAll("\\n|\\r\\n", System.getProperty("line.separator"));        assertEquals(out.toString().replaceAll("\\n|\\r\\n", System.getProperty("line.separator")), expected);        out.reset();        assertFalse(session.isLoggedIn());        assertEquals(0,session.getRoles().size());    }}